from telegram.ext import CommandHandler
from telegram.constants import ParseMode
import random
import string
from shivu import application, user_collection, collection

# Dictionary to store generated waifus and their details
generated_waifus = {}

# Sudo user IDs
sudo_user_ids = ["7678359785"]

# Sudo user ID to send logs
log_sudo_user_ids = ["7678359785"]

# Function to generate a random string of length 5 composed of random letters
def generate_random_code():
    return ''.join(random.choices(string.ascii_lowercase + string.digits, k=5))

# Function to handle the waifugen command
async def waifugen(update, context):
    if str(update.effective_user.id) not in sudo_user_ids:
        await update.message.reply_text("You are not authorized to generate waifus.")
        return

    try:
        waifu_id = context.args[0]  # Get the waifu ID from the command
        quantity = int(context.args[1])  # Get the quantity from the command
    except (IndexError, ValueError):
        await update.message.reply_text("Invalid usage. Usage: /wgen <waifu_id> <quantity>")
        return

    waifu = await collection.find_one({'id': waifu_id})
    if not waifu:
        await update.message.reply_text("Invalid waifu ID.")
        return

    code = generate_random_code()
    generated_waifus[code] = {'waifu': waifu, 'quantity': quantity}

    response_text = (
        f"Generated waifu:\n"
        f"{code}`\n"
        f"Name: {waifu['name']}\nRarity: {waifu['rarity']}\nQuantity: {quantity}"
    )
    await update.message.reply_text(response_text, parse_mode=ParseMode.MARKDOWN)

    log_text = (
        f"Waifu generated by user {update.effective_user.id}:\n"
        f"Code: {code}\nName: {waifu['name']}\nRarity: {waifu['rarity']}\nQuantity: {quantity}"
    )
    for log_user_id in log_sudo_user_ids:
        await context.bot.send_message(chat_id=log_user_id, text=log_text)

# Function to claim a generated waifu
async def claimwaifu(update, context):
    code = " ".join(context.args)
    user_id = update.effective_user.id
    user_mention = f"[{update.effective_user.first_name}](tg://user?id={user_id})"

    if code in generated_waifus:
        details = generated_waifus[code]
        if details['quantity'] > 0:
            waifu = details['waifu']

            # Update the user's characters collection
            result = await user_collection.update_one(
                {'id': user_id},
                {'$push': {'characters': waifu}},
                upsert=True  # Ensure a user entry is created if it doesn't exist
            )
            print(f"Modified Count: {result.modified_count}")  # Debugging output

            details['quantity'] -= 1
            if details['quantity'] == 0:
                del generated_waifus[code]

            response_text = (
                f"Congratulations {user_mention}! You have received a new waifu for your harem üíç!\n"
                f"‚õ© Name: {waifu['name']}\n"
                f"{waifu['rarity'][0]}Rarity: {waifu['rarity'][2:]}\n"
                f"üíÆ Anime: {waifu['anime']}\n"
            )
            await update.message.reply_photo(photo=waifu['img_url'], caption=response_text, parse_mode=ParseMode.MARKDOWN)

            log_text = (
                f"Waifu claimed by user {user_id}:\n"
                f"Code: {code}\nName: {waifu['name']}\nRarity: {waifu['rarity']}\nRemaining quantity: {details['quantity']}"
            )
            for log_user_id in log_sudo_user_ids:
                await context.bot.send_message(chat_id=log_user_id, text=log_text)
        else:
            await update.message.reply_text("‚õî This code has already been claimed the maximum number of times.")
    else:
        await update.message.reply_text("Invalid code.")

# Add command handlers to the bot
application.add_handler(CommandHandler("wgen", waifugen))
application.add_handler(CommandHandler("redeem", claimwaifu))
